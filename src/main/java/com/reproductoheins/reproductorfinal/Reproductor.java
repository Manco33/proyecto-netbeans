/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package com.reproductoheins.reproductorfinal;
import com.mpatric.mp3agic.ID3v1;
import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.Mp3File;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.base.AudioDevice;
import uk.co.caprica.vlcj.player.base.TrackDescription;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import uk.co.caprica.vlcj.media.Meta;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author gman
 */
public class Reproductor extends javax.swing.JFrame {

    private EmbeddedMediaPlayerComponent mediaPlayerComponent;
    private List<String> playlist;
    private int currentTrack = 0;
    private DefaultTableModel mt = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 3 && column != 4 ;
            }
        };
    String rxeproducir = "";
    
    ColeccionCancionesImpl canciones =  new ColeccionCancionesImpl();
    /**
     * Creates new form Reproductor
     */
    public Reproductor() {
        initComponents();
        mediaPlayerComponent = new EmbeddedMediaPlayerComponent();
        jPanel1.add(mediaPlayerComponent);
        playlist = new ArrayList<>();
        populateAudioDevices();
        
   
        String ids []  = {"Titulo","Artista","Album","Duracion","Rutadelarchivo"};
        mt.setColumnIdentifiers(ids);
        
        
        jTableListado.setModel(mt);
        
        jLabelReproduciendo.setText("");
        
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(mt);
        jTableListado.setRowSorter(sorter);        
        
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextField1.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jTextField1.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // No se necesita implementar
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxDispositivos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabelReproduciendo = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListado = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButtonEliminar = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSlider1 = new javax.swing.JSlider();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItemCSV = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBoxDispositivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispositivos(evt);
            }
        });

        jLabel1.setText("Salida de audio: ");

        jButton1.setText("Reproducir");
        jButton1.setToolTipText("xxxx");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirmusica(evt);
            }
        });

        jButton2.setText("Pausar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarmusica(evt);
            }
        });

        jButton3.setText("Parar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararmusica(evt);
            }
        });

        jButton4.setText("Siguiente");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguiente(evt);
            }
        });

        jButton5.setText("Anterior");
        jButton5.setToolTipText("");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anterior(evt);
            }
        });

        jButton6.setText("Volumen -");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeAbajo(evt);
            }
        });

        jButton7.setText("Volumen +");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumenArriba(evt);
            }
        });

        jPanel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabelReproduciendo.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabelReproduciendo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelReproduciendo.setText("jLabel2");

        jButton8.setText("Cargar MP3");
        jButton8.setToolTipText("");
        jButton8.setActionCommand("cargarmp3");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                llenarListado(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTableListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableListado.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableListadoAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTableListado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListadoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableListado);

        jLabel2.setText("Buscar: ");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminarCancion(evt);
            }
        });
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("Archivo");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Abrir");
        fileMenu.add(openMenuItem);

        saveMenuItemCSV.setMnemonic('s');
        saveMenuItemCSV.setText("Guardar CSV");
        saveMenuItemCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemCSVActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItemCSV);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Ayuda");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contenido");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Acerca");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(550, 550, 550)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelReproduciendo, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxDispositivos, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4)
                                        .addGap(30, 30, 30)
                                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabelReproduciendo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton7)
                    .addComponent(jButton5))
                .addGap(42, 42, 42)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDispositivos, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonEliminar))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volumeAbajo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeAbajo
        // TODO add your handling code here:
        int currentVolume = mediaPlayerComponent.mediaPlayer().audio().volume();
        mediaPlayerComponent.mediaPlayer().audio().setVolume(currentVolume - 10);        
    }//GEN-LAST:event_volumeAbajo

    private void volumenArriba(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumenArriba
        // TODO add your handling code here:
        int currentVolume = mediaPlayerComponent.mediaPlayer().audio().volume();
        mediaPlayerComponent.mediaPlayer().audio().setVolume(currentVolume + 10);        
    }//GEN-LAST:event_volumenArriba

    private void anterior(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anterior
        // TODO add your handling code here:
        System.out.println("Anterior: "+currentTrack);  //currentTrack, variable que representa la pista de música actual
        if (currentTrack > 0) {//condicion,verifica si la pista actual no es la primera (es decir, si hay una pista anterior)
            currentTrack--;
            play();
        }       
    }//GEN-LAST:event_anterior

    private void siguiente(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguiente
        // TODO add your handling code here:
        System.out.println("siguiente: "+currentTrack);
        if (currentTrack < playlist.size() - 1) {
            currentTrack++;
            play();
        }        
    }//GEN-LAST:event_siguiente

    private void pararmusica(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararmusica
        // TODO add your handling code here:
        mediaPlayerComponent.mediaPlayer().controls().stop();
    }//GEN-LAST:event_pararmusica

    private void pausarmusica(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarmusica
        // TODO add your handling code here:
        mediaPlayerComponent.mediaPlayer().controls().pause();
    }//GEN-LAST:event_pausarmusica
    
    //verifica si hay pista en la lista de reproduccion, y si es asi
    //reproduce la pista actual
    private void reproducirmusica(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirmusica
        // TODO add your handling coside here:
        if (!playlist.isEmpty()) {
            mediaPlayerComponent.mediaPlayer().media().play(playlist.get(currentTrack));
        }
    }//GEN-LAST:event_reproducirmusica

    private void jPanel1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1AncestorAdded

    private void dispositivos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispositivos
        // TODO add your handling code here:
//        String selectedDevice = (String) jComboBoxDispositivos.getSelectedItem();
        int selectedIndex = jComboBoxDispositivos.getSelectedIndex(); //Obtener el indice del dispositivo seleccionado enel JCcomboBox
        
        //Obtener la lista de dispositivos de salida de audio disponibles
        List<AudioDevice> audioOutputs = mediaPlayerComponent.mediaPlayer().audio().outputDevices();
        
        //Obtener el identificaro del dispositivo seleccinado
        String deviceToSet = audioOutputs.get(selectedIndex).getDeviceId();
        System.out.println(deviceToSet);
        
        //Establecer el dispositivo de salida de audio en el reproductor multimedia
        mediaPlayerComponent.mediaPlayer().audio().setOutputDevice(null, deviceToSet);        
    }//GEN-LAST:event_dispositivos

    //Funcion que permite al usuario seleccionar un archivo MP3, extraer informacion de las etiquetas ID3 y agregar la pista a una lista
    // de reproduccion
    
    //Metodo llenar Listado, que toma el objeto MouseEvent como argumento, es privado ya que solo se puede acceder dentro de la clase
    private void llenarListado(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_llenarListado
        
        JFileChooser fileChooser = new JFileChooser();  // Se crea la instancia de JFileChooser componente de interfaz para seleccionar archivos o directorios
        fileChooser.setAcceptAllFileFilterUsed(false);  // esto  desactiva la opcion de mostrar todos los tipos de archivos en el dialogo de seleccion de archivos
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos MP3", "mp3"); // se crea un filtro para mostrar solo archivos con la extension .mp3 en el dialogo de seleccion
        fileChooser.addChoosableFileFilter(filter); // se agrega el filtro creado al JFileChooser
        String titulo ="";
        String artista  ="";   // variable tipo cadena
        String album  ="";
                
        int returnValue = fileChooser.showOpenDialog(null); // Muestra cuadro de dialogo para seleccionar un archivo
        if (returnValue == JFileChooser.APPROVE_OPTION) {  // returnValue si el usuario selecciono un archivo o cancelo la operacion
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();
            try {
                // crea el objeto Mp3File a partir de un audio especificado por la ruta filePath
                Mp3File mp3file = new Mp3File(filePath);    
                if (mp3file.hasId3v1Tag()) {
                    ID3v1 id3v1Tag = mp3file.getId3v1Tag(); // crea el objeto llamado id3v1Tag y se asigna el valor de la etiqueta del archivo
                    
                    //muestra los mensajes los siguientes:
                    System.out.println("Título: " + id3v1Tag.getTitle()); //Muestra el titulo, y el metodo recupera la etiqueta ID3v1
                    titulo = (id3v1Tag.getTitle() != null) ? id3v1Tag.getTitle() : ""; //operador ternario (?:) para asignar el valor a la variable titulo
                    //en caso que verifica si no es nulo, si es verdadera se asigna el valor de id3v1Tag.getTitle() a titulo
                    
                    System.out.println("Artista: " + id3v1Tag.getArtist());
                    artista = (id3v1Tag.getArtist() != null) ? id3v1Tag.getArtist() : "";
                    
                    System.out.println("Álbum: " + id3v1Tag.getAlbum());
                    album = (id3v1Tag.getAlbum() != null) ? id3v1Tag.getAlbum() : "";
                            
                }
                if (mp3file.hasId3v2Tag()) {
                    ID3v2 id3v2Tag = mp3file.getId3v2Tag();
                    
                    System.out.println("Título: " + id3v2Tag.getTitle());
                    titulo = (id3v2Tag.getTitle() != null) ? id3v2Tag.getTitle() : "";
                    
                    System.out.println("Artista: " + id3v2Tag.getArtist());
                    artista = (id3v2Tag.getArtist() != null) ? id3v2Tag.getArtist() : "";
                    
                    System.out.println("Álbum: " + id3v2Tag.getAlbum());
                    album = (id3v2Tag.getAlbum() != null) ? id3v2Tag.getAlbum() : "";
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            
         String formatoTiempo = "";
        try {
            Mp3File mp3file = new Mp3File(filePath); //filePath,
             long duracionEnSegundos = mp3file.getLengthInSeconds();
            int minutos = (int) (duracionEnSegundos / 60);
            int segundos = (int) (duracionEnSegundos % 60);
            formatoTiempo = String.format("%02d:%02d", minutos, segundos);
            System.out.println("La duración del archivo MP3 es: " + formatoTiempo);
        } catch (Exception e) {
            e.printStackTrace();
        }       
            
        mt.addRow(new Object[]{titulo,artista,album,formatoTiempo,filePath});
        
        canciones.setCancion(
                new Cancion(
                titulo,
                artista,
                album,
                formatoTiempo,
                filePath
                )
        );
        
        
        addTrack(filePath);

        if(playlist.size()==1)
        {
            
            play();
            currentTrack++;
        }
            
        }        
        
    }//GEN-LAST:event_llenarListado

    // Metodo que maneja los clics del mouse en la tabla JTableListado
    private void jTableListadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListadoMouseClicked
        
                int row = jTableListado.rowAtPoint(evt.getPoint()); // devuelve el indice de la fila en la que se encuentra el punto del mouse
                int col = jTableListado.columnAtPoint(evt.getPoint()); //devuelve el indice de la columna
                if (row >= 0 && col >= 0) // evalua para determinar si se debe reproducir un archivo de medios y actualizar una etiqueta.
                {
                    System.out.println("Fila seleccionada: " + row);
                    System.out.println("Valor en la fila seleccionada: " + jTableListado.getValueAt(row, 4));
                    String mrepro = (String) jTableListado.getValueAt(row, 4);
                    System.out.println("rxeproducira: " + rxeproducir);
                    
                    if(rxeproducir == null ? Integer.toString(row) != null : !rxeproducir.equals(Integer.toString(row))){
                        mediaPlayerComponent.mediaPlayer().media().play(mrepro);
                        jLabelReproduciendo.setText(getCurrentMediaTitle());
                        rxeproducir = Integer.toString(row);
                    }
                    
                    //se declara una variable y se le asigna el valor de la celda en la final row y la columna 0 de la tabla
                    String titulo = (String) jTableListado.getValueAt(row, 0);
                    System.out.println("Titulo: " + titulo);

                    String artista = (String) jTableListado.getValueAt(row, 1);
                    System.out.println("artista: " + artista);

                    String album = (String) jTableListado.getValueAt(row, 2);
                    System.out.println("album: " + album);

                    String duracion = (String) jTableListado.getValueAt(row, 3);
                    System.out.println("duracion: " + duracion);

                    String rutadearchivo = (String) jTableListado.getValueAt(row, 4);
                    System.out.println("rutadearchivo: " + rutadearchivo);
                    
                    //se llama el metodo SetActualizaCancion del objeto canciones, pasando la ruta del archivo y un nuevo objeto Cancion con los 
                    //valores obtenidos
                    canciones.SetActualizarCancion(rutadearchivo, new Cancion(titulo,artista,album,duracion,rutadearchivo));
                    
                }
        
    }//GEN-LAST:event_jTableListadoMouseClicked

    //Metodo maneja la eliminicacion de canciones en una interfaz grafica de usuario, actualizando tanto la tabla como la lista
    //de reproduccion segun la seleccion del usuario
    private void eliminarCancion(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarCancion
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableListado.getModel(); //variable model del tipo DefaultTable representa el modelo de datos de la tabla
        int selectedRow = jTableListado.getSelectedRow(); // Obtiene el indice de la fila seleccionada en la tabla
        if (selectedRow != -1) {   
            Object value = jTableListado.getValueAt(selectedRow, 4); //se utiliza para obtener el valor de una celda especifica, en este caso columna 4
            model.removeRow(selectedRow); // se encarga de eliminar la filla correspondiente a la cancion seleccionada
            System.out.println("Valor en la fila seleccionada y columna 4" + ": " + value);
            canciones.setEliminarCancion((String) value);
            playlist.removeIf(test -> test.equals((String) value));
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para eliminar.");
        }        
    }//GEN-LAST:event_eliminarCancion

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    
    private void saveMenuItemCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemCSVActionPerformed
        //Crea un selector de arhivos para guardar
        JFileChooser fileChooser = new JFileChooser(); 
        fileChooser.setAcceptAllFileFilterUsed(false); //evitar que se muestren todos los tipos de archivo
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo CSV", "CSV");//Filtrar por archivos CSV
        fileChooser.addChoosableFileFilter(filter);//Agregar el filtro al selector        
        
        int seleccion = fileChooser.showSaveDialog(null);//Mostrar el dialogo de guardar y obtener la opcion seleccionada
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter csv = new FileWriter(fileChooser.getSelectedFile() + ".csv");//Crear un archivo CSV conel nombre seleccinado por el usuario
//                TableModel model = table.getModel();

                // Escribir las columnas en la primera linea del archivo
                for (int i = 0; i < mt.getColumnCount(); i++) {
                    csv.write(mt.getColumnName(i) + ",");
                }
                csv.write("\n"); // agrega un salto de linea al final

                // Escribir las filas 
                for (int i = 0; i < mt.getRowCount(); i++) {
                    for (int j = 0; j < mt.getColumnCount(); j++) {
                        csv.write(mt.getValueAt(i, j).toString() + ",");
                    }
                    csv.write("\n");
                }

                csv.close();
                JOptionPane.showMessageDialog(null, "Archivo guardado exitosamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error al guardar el archivo, llenar los campos correspondientes");
                e.printStackTrace();  // maneja errores de escritura del archivo             
            }
        }        
        
    }//GEN-LAST:event_saveMenuItemCSVActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTableListadoAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableListadoAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableListadoAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reproductor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JComboBox<String> jComboBoxDispositivos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelReproduciendo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTableListado;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItemCSV;
    // End of variables declaration//GEN-END:variables
    
    public void play() {
        
        if (!playlist.isEmpty()) {
            mediaPlayerComponent.mediaPlayer().media().play(playlist.get(currentTrack));
            jLabelReproduciendo.setText(getCurrentMediaTitle());
        }
    }
    
    public void addTrack(String filePath) {
        playlist.add(filePath);
    }

    private void populateAudioDevices() {
        List<AudioDevice> audioOutputs = mediaPlayerComponent.mediaPlayer().audio().outputDevices();
        for (AudioDevice output : audioOutputs) {
            jComboBoxDispositivos.addItem(output.getDeviceId());
        }
    }    
    
    public String getCurrentMediaTitle() {
        return mediaPlayerComponent.mediaPlayer().media().meta().get(Meta.TITLE) + " - " + mediaPlayerComponent.mediaPlayer().media().meta().get(Meta.ARTIST) ;
    }
    
    
    
}
